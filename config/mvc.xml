<?xml version="1.0" encoding="utf-8"?>
<beans 	xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 告知springmvc  哪些包中 存在 被注解的类
	     use-default-filters=true 凡是被 @Controller @Service  @Repository注解的类，都会被扫描
	     use-default-filters=false 默认不扫描包内的任何类, 只扫描include-filter中指定的类
	 -->
	<context:component-scan base-package="com.anyunpei" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
	</context:component-scan>
	<!-- 注册注解开发驱动 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<!-- 声明转换类型:json -->
				<property name="supportedMediaTypes">
					<list>
						<value>application/json</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 视图解析器
	     作用：1.捕获后端控制器的返回值="index"
	      2.解析= 在返回值的前后 拼接==   "/index.jsp"
	 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/jsp/"></property>
		<!-- 后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- 
		额外的增加一个handler，且其requestMapping:  "/**" 可以匹配所有请求，但是优先级最低
		所以如果其他所有的handler都匹配不上，请求会转向 "/**" ,恰好，这个handler就是处理静态资源的
		处理方式：将请求转会到tomcat中名为default的Servlet
		
		request-mapping: /*  /a  /b   /c   /ssss
		               : /**   /a   /b   /c    /a/b/c/df/d/f/fe/fefef/d
	 -->
	<mvc:default-servlet-handler/>
<!-- 	
	
		声明拦截器
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/inter/test1"/>
			<mvc:mapping path="/inter/test2"/>
			<mvc:mapping path="/inter/test*"/>
			<mvc:mapping path="/inter/**"/>
			<mvc:exclude-mapping path="/inter/a/**"/>
			<bean class="com.baizhi.interceptor.MyInter1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/inter/test1"/>
			<mvc:mapping path="/inter/test2"/>
			<mvc:mapping path="/inter/test*"/>
			<mvc:mapping path="/inter/**"/>
			<mvc:exclude-mapping path="/inter/a/**"/>
			<bean class="com.baizhi.interceptor.MyInter2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	上传解析器 
	     id必须是：“multipartResolver”
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		最大可上传的文件大小   byte 
		<property name="maxUploadSize" value="2097152"></property>
	</bean>
	
	声明异常解析器	
	<bean class="com.baizhi.exception.resolver.MyExResolver"></bean>
	 -->
	<!-- 验证码组件声明 -->
<!-- 	<bean class="com.google.code.kaptcha.servlet.KaptchaExtend">
		<constructor-arg>
			<props>  
				是否有边框 边框颜色 边框粗细
                <prop key="kaptcha.border">no</prop>
                <prop key="kaptcha.session.key">code</prop>  
                <prop key="kaptcha.textproducer.char.length">5</prop>
                <prop key="kaptcha.background.clear.from">211,229,237</prop>
                <prop key="kaptcha.background.clear.to">211,239,235</prop>
            </props>  
		</constructor-arg>
	</bean> -->
</beans>
